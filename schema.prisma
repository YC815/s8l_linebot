// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String   // Required for email auth
  name          String?
  image         String?
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  customDomains      CustomDomain[]
  urls               UserUrl[]
  accounts           Account[]
  sessions           Session[]
  verificationTokens EmailVerificationToken[]
  passwordResetTokens PasswordResetToken[]
  
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  userId  String
  expires DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  userId  String
  expires DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model CustomDomain {
  id          String   @id @default(cuid())
  prefix      String   @unique @db.VarChar(10) // 3-10 characters
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  urls        UserUrl[]
  
  @@index([userId])
  @@index([prefix])
}

model Url {
  id          String   @id @default(cuid())
  originalUrl String   @unique
  shortCode   String   @unique @db.VarChar(6)
  title       String?
  clickCount  Int      @default(0) // Track click statistics
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userUrls    UserUrl[]
  
  @@index([originalUrl])
  @@index([shortCode])
}

model UserUrl {
  id               String   @id @default(cuid())
  userId           String
  urlId            String
  customDomainId   String?  // Nullable for random short URLs
  customPath       String?  // Custom path for domain-based URLs
  customTitle      String?  // User-provided custom title
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  url              Url           @relation(fields: [urlId], references: [id], onDelete: Cascade)
  customDomain     CustomDomain? @relation(fields: [customDomainId], references: [id], onDelete: Cascade)
  
  @@unique([customDomainId, customPath]) // Unique custom path per domain
  @@index([userId])
  @@index([urlId])
  @@index([customDomainId])
}